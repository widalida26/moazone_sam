AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: moazone app

Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Parameters:
  Prefix:
    Default: 'moazone'
    Type: String
    Description: Prefix for resources

  RDSUsername:
    Type: String
    ConstraintDescription: 'must be between 1 to 16 alphanumeric characters.'
    Description: 'Database admin account user name, between 1 to 16 alphanumeric characters.'
    MaxLength: '16'
    MinLength: '1'
    Default: 'admin'

  RDSPassword:
    NoEcho: true
    Type: 'String'
    MinLength: '1'
    MaxLength: '41'
    Description: 'Database admin account password in RDS'

  RDSPort:
    Default: '3306'
    Type: 'Number'
    MinValue: '1150'
    MaxValue: '65535'
    Description: 'TCP/IP port used to connect DB in RDS.'

  RDSHost:
    Type: 'String'
    Description: 'Host used to connect DB in RDS.'

  RDSDBName:
    Default: 'card'
    Type: 'String'
    Description: 'Database name used in application.'

Resources:
  # Secret Manager
  RDSProfile:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: rds-user
      SecretString: !Sub |
        {
          "username":"${RDSUsername}",
          "password":"${RDSPassword}", 
          "host":"${RDSHost}",
          "port":"${RDSPort}",
          "dbname":"${RDSDBName}",
          "ssl":"true"
        }

  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSProfile
      TargetId: arn:aws:rds:ap-northeast-2:269872288918:db:card-database
      TargetType: AWS::RDS::DBInstance

  # cognito
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: customer-pool
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      MfaConfiguration: 'OFF'
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuthentication.Arn

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: moazone-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY

  # IAM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: RDSSecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref RDSProfile
      RoleName: !Sub ${Prefix}-Role-Lambda

  PostAuthenticationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SetUserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-set-user-attributes
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource:
              - !GetAtt UserPool.Arn
      Roles:
        - !Ref PostAuthenticationRole

  # API Gateway
  MoazoneApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      # Auth:
      #   DefaultAuthorizer: CognitoAuthorizer
      #   Authorizers:
      #     CognitoAuthorizer:
      #       UserPoolArn: !GetAtt UserPool.Arn

  # Lambda
  # auth
  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/define-auth-challenge/
      Handler: define-auth-challenge.handler
      Runtime: nodejs12.x

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/create-auth-challenge/
      Handler: create-auth-challenge.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          SES_FROM_ADDRESS: widalida26@naver.com
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: '*'

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/verify-auth-challenge-response/
      Handler: verify-auth-challenge-response.handler
      Runtime: nodejs12.x

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/pre-sign-up/
      Handler: pre-sign-up.handler
      Runtime: nodejs12.x

  PostAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-triggers/post-authentication/
      Handler: post-authentication.handler
      Runtime: nodejs12.x
      Role: !GetAtt PostAuthenticationRole.Arn

  # permission
  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthentication.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  RootFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ['root.handler']
      Events:
        Root:
          Type: Api
          Properties:
            Path: /
            Method: get
    Metadata:
      DockerContext: ./root/
      Dockerfile: Dockerfile.root
      DockerTag: v0.1

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ['login.handler']
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Root:
          Type: Api
          Properties:
            Path: /login/
            Method: get
    Metadata:
      DockerContext: ./login/
      Dockerfile: Dockerfile.login
      DockerTag: v0.1

  ChallengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ['challenge.handler']
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Root:
          Type: Api
          Properties:
            Path: /challenge/
            Method: post
    Metadata:
      DockerContext: ./challenge/
      Dockerfile: Dockerfile.challenge
      DockerTag: v0.1

  SurveyFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ['survey.handler']
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref MoazoneApi
            Path: /survey/
            Method: post
    Metadata:
      DockerContext: ./survey/
      Dockerfile: Dockerfile.survey
      DockerTag: v0.1

  # AuthFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     PackageType: Image
  #     ImageConfig:
  #       Command: ['auth.handler']
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Events:
  #       Root:
  #         Type: Api
  #         Properties:
  #           Path: /auth/
  #           Method: get
  #   Metadata:
  #     # DockerTag: python 3.9
  #     DockerContext: ./auth/
  #     Dockerfile: Dockerfile.auth
  #     DockerTag: v0.1
